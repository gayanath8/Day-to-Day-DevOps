name: DevOps Deployment
on:
  workflow_dispatch:
  push:
    branches:
      - "main"
    paths:
      - frontend/**
      - backend/**
      - .github/workflows/deploy*

jobs:
  changes:
    name: Job 1 - Check Run
    runs-on: ubuntu-latest
    outputs:
      backend-changes: ${{ steps.changes.outputs.backend-changes }}
      frontend-changes: ${{ steps.changes.outputs.frontend-changes }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Determine changed services
        id: changes
        run: |
          CHANGED_FILES=$(git diff --name-only HEAD^ HEAD)

          if echo "$CHANGED_FILES" | grep -q "backend-project/"; then
            echo "Backend changes detected."
            echo "backend-changes=true" >> $GITHUB_OUTPUT
          else
            echo "No Backend changes detected."
            echo "backend-changes=false" >> $GITHUB_OUTPUT
          fi

          if echo "$CHANGED_FILES" | grep -q "frontend-project/"; then
            echo "Frontend changes detected."
            echo "frontend-changes=true" >> $GITHUB_OUTPUT
          else
            echo "No Frontend changes detected."
            echo "frontend-changes=false" >> $GITHUB_OUTPUT
          fi

  unit-test:
    name: Job 2 - Backend Unit Test Run
    needs: changes
    if: needs.changes.outputs.backend-changes == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
      - name: Install dependencies
        working-directory: ./backend-project
        run: yarn install --frozen-lockfile
      - name: Run unit tests
        working-directory: ./backend-project
        run: yarn test
      - name: Check code coverage
        working-directory: ./backend-project
        id: check-coverage
        run: |
          echo "Running test coverage..."
          npm run test:cov > coverage.txt || echo "Coverage command failed but continuing..."

          echo "Coverage output:"
          cat coverage.txt # Display the coverage result for debugging

          COVERAGE=$(awk '/All files/ {print $4}' coverage.txt || echo 0) # Default to 0 if not found

          echo "Test coverage is: $COVERAGE%"

          COVERAGE_THRESHOLD=60.0
          if awk "BEGIN {exit !($COVERAGE >= $COVERAGE_THRESHOLD)}"; then
            echo "Coverage is above 60%, proceeding with backend deployment."
            echo "deploy-be-changes=true" >> $GITHUB_ENV
          else
            echo "Coverage is below 60%, skipping backend deployment."
            echo "deploy-be-changes=false" >> $GITHUB_ENV
          fi

  backend-deploy:
    needs: unit-test
    if: needs.unit-test.outputs.deploy-be-changes == 'true'
    name: Job 3 - Backend Deploy
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-'server'
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      #   - name: Use Node.js ${{ matrix.node-version }}
      #     uses: actions/setup-node@v3
      #     with:
      #       node-version: ${{ matrix.node-version }}
      #   - name: Configure AWS credentials
      #     uses: aws-actions/configure-aws-credentials@v1
      #     with:
      #       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #       aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #       aws-region: us-east-1
      #   - name: Login to Amazon ECR
      #     id: login-ecr
      #     uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push the backend images to Amazon ECR
        id: build-backend-image
        env:
          ECR_REGISTRY: "Example-Registry"
          ECR_REPOSITORY: backend-services
          IMAGE_TAG: ${{ github.head_ref || github.ref_name }}
        run: |
          # Build a docker container and push it to ECR 
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile .
          echo "Pushing backend image to ECR..."
        #   docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        #   echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      - name: Deploy backend images to Amazon EC2
        id: deploy-exchange-backend
        # env:
        #   PRIVATE_KEY: ${{ secrets.AWS_SSH_KEY_PRIVATE_TEST }}
        #   HOSTNAME: ${{secrets.HOST_IP_TEST }}
        #   USER_NAME: ${{ secrets.USER_NAME_TEST }}
        run: |
          echo Deploy Backend....

  backend-deploy-fail:
    needs: unit-test
    if: needs.unit-test.outputs.deploy-be-changes == 'false'
    name: Job 4 - Backend Deploy Failing
    runs-on: ubuntu-latest
    steps:
      - name: Notify backend failure
        run: |
          echo "Backend deployment skipped due to test coverage below 60%."

  frontend-deploy:
    needs: changes
    if: needs.changes.outputs.frontend-changes == 'true'
    name: Job 5 - Frontend Deploy
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-'web'
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      #   - name: Use Node.js ${{ matrix.node-version }}
      #     uses: actions/setup-node@v3
      #     with:
      #       node-version: ${{ matrix.node-version }}
      #   - name: Configure AWS credentials
      #     uses: aws-actions/configure-aws-credentials@v1
      #     with:
      #       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #       aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #       aws-region: us-east-1
      #   - name: Login to Amazon ECR
      #     id: login-ecr
      #     uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push the frontend images to Amazon ECR
        id: build-frontend-image
        env:
          ECR_REGISTRY: "Example-Registry"
          ECR_REPOSITORY: frontend-services
          IMAGE_TAG: ${{ github.head_ref || github.ref_name }}
        run: |
          # Build a docker container and push it to ECR 
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile .
          echo "Pushing frontend image to ECR..."
      - name: Deploy frontend images to Amazon EC2
        id: deploy-frontend-image
        # env:
        #   PRIVATE_KEY: ${{ secrets.AWS_SSH_KEY_PRIVATE_TEST }}
        #   HOSTNAME: ${{secrets.HOST_IP_TEST }}
        #   USER_NAME: ${{ secrets.USER_NAME_TEST }}
        run: |
          echo Deploy Frontend....
